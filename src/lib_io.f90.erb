<%
  TYPES = [
    'integer',
    'integer(8)',
    'real',
    'double precision',
    'complex',
    'complex(kind(0.0d0))',
    'logical',
  ]

  DIM_MAX = 7
  DIM_RANGE = (1..DIM_MAX)

  NUM_DESC_MAX = 10

  def list(n, str = ', ', &block)
    (1..n).map(&block).join(str)
  end

  class String
    def fort_suf
      buf = self.gsub(/[^\w]/, '_')
      buf = 'type_' + buf unless buf[0] =~ /[A-Za-z]/
      '_' + buf
    end
  end
%>

#include "./env.h"

module lib_io
  use iso_fortran_env, only: ERROR_UNIT, INPUT_UNIT, OUTPUT_UNIT

  implicit none
  private
  public:: VERSION, ARRAY_EXT, META_EXT, LEN_NAME_MAX
  integer, parameter:: VERSION = 1 ! File format's compatibility.
  integer, parameter:: LEN_NAME_MAX = 1024
  character(len = *), parameter:: ARRAY_EXT = '.array'
  character(len = *), parameter:: META_EXT = '.meta'
  public:: new_unit
  public:: write_array, read_array
  public:: number_of_lines, number_of_columns, file_shape

  interface new_unit
    <% ['integer', 'integer(8)'].each{|type| %>
      module procedure new_unit<%= type.fort_suf %>
    <% } %>
  end interface new_unit

  <% TYPES.each{|type| %>
    <% DIM_RANGE.each{|dim| %>
      interface write_array
        module procedure write_array<%= type.fort_suf %>_<%= dim %>
      end interface write_array

      interface read_array
        module procedure read_array<%= type.fort_suf %>_<%= dim %>
      end interface read_array

      interface read_array_meta
        module procedure read_array_meta<%= type.fort_suf %>_<%= dim %>
      end interface read_array_meta
    <% } %>
  <% } %>

contains

  ! @desc Return a size 2 array which contains (/numberOfLines, numberOfColumns/) of the file fileName.
  function file_shape(fileName, numberOfHeaders) result(this)
    integer(8):: this(1:2)
    character(len = *), intent(in):: fileName
    integer, intent(in), optional:: numberOfHeaders

    integer:: numberOfHeaders_

    numberOfHeaders_ = 0
    if(present(numberOfHeaders)) numberOfHeaders_ = numberOfHeaders

    this = (/number_of_lines(fileName) - numberOfHeaders_, number_of_columns(fileName, numberOfHeaders_)/)
  end function file_shape

  function number_of_lines(fileName) result(this)
    integer(8):: this
    character(len = *), intent(in):: fileName

    integer:: rU1, ios
    character:: dummy

    call new_unit(rU1)
    open(rU1, file = fileName, status = 'old', action = 'read')
    do this = 0, huge(this)
      read(rU1, *, iostat = ios) dummy
      if(ios /= 0) exit
    end do
    close(rU1)
  end function number_of_lines

  ! @desc Return number of columns at line (numberOfHeaders + 1) in file fileName.
  ! @desc The line is separated by space and tabs character.
  ! @desc Quoted string containing space/tab characteres is not considared.
  function number_of_columns(fileName, numberOfHeaders) result(this)
    integer(8):: this
    character(len = *), intent(in):: fileName
    integer, intent(in), optional:: numberOfHeaders

    integer:: rU1, ios, i
    character:: c
    character(len = 128):: mode

    integer:: numberOfHeaders_

    numberOfHeaders_ = 0
    if(present(numberOfHeaders)) numberOfHeaders_ = numberOfHeaders

    mode = 'seek_normal_char'
    this = 0
    call new_unit(rU1)
    open(rU1, file = fileName, status = 'old', action = 'read')
    do i = 1, numberOfHeaders_
      read(rU1, *)
    end do
    do
      read(rU1, '(a1)', advance = 'no', iostat = ios) c
      if(ios /= 0 .or. c == new_line('_'))then
        exit
      else if(mode == 'seek_normal_char' .and. c /= ' ' .and. c /= TAB)then
        this = this + 1
        mode = 'seek_space_or_tab'
        cycle
      else if(mode == 'seek_space_or_tab' .and. (c == ' ' .or. c == TAB))then
        mode = 'seek_normal_char'
        cycle
      else
        write(ERROR_UNIT, *) __FILE__, __LINE__, 'Must not happen.'
        stop 1
      end if
    end do
    close(rU1)
  end function number_of_columns

  <% TYPES.each{|type| %>
    <% DIM_RANGE.each{|dim| %>
      subroutine write_array<%= type.fort_suf %>_<%= dim %>(arrayName, A<%= list(NUM_DESC_MAX, ''){|i| ", desc#{i}"} %>)
        character(len = *), intent(in):: arrayName
        <%= type %>, intent(in):: A(<%= list(dim){':'} %>)
        <% if NUM_DESC_MAX >= 1 %>
          character(len = *), intent(in), optional:: <%= list(NUM_DESC_MAX){|i| "desc#{i}"} %>
        <% end %>

        character(len = *), parameter:: dataType = '<%= type %>'
        integer, parameter:: dim = <%= dim %>

        integer:: sizes(1:dim)
        integer:: wU1
        integer:: i
        character(len = LEN_NAME_MAX):: arrayFileName, arrayMetaFileName

        arrayFileName = trim(arrayName) // ARRAY_EXT
#ifdef NEWUNIT_AVAILABLE
        open(newunit = wU1, file = trim(arrayFileName), status = 'replace', action = 'write', form = 'unformatted')
#else
        open(unit = wU1, file = trim(arrayFileName), status = 'replace', action = 'write', form = 'unformatted')
        call new_unit(wU1)
#endif
        write(wU1) A
        close(wU1)

        arrayMetaFileName = trim(arrayFileName) // META_EXT
#ifdef NEWUNIT_AVAILABLE
        open(newunit = wU1, file = trim(arrayMetaFileName), status = 'replace', action = 'write')
#else
        open(unit = wU1, file = trim(arrayMetaFileName), status = 'replace', action = 'write')
        call new_unit(wU1)
#endif

        forall(i = 1:dim) sizes(i) = size(A, i)

        write(wU1, *) VERSION
        write(wU1, *) dataType
        write(wU1, *) dim
        write(wU1, *) (sizes(i), i = 1, dim)

        write(wU1, *)
        write(wU1, *) 'VERSION'
        write(wU1, *) 'dataType'
        write(wU1, *) 'dim'
        write(wU1, *) 'sizes'

        write(wU1, *)
        <% (1..NUM_DESC_MAX).each{|i| %>
          if(present(desc<%= i %>)) write(wU1, *) desc<%= i %>
        <% } %>
        close(wU1)
      end subroutine write_array<%= type.fort_suf %>_<%= dim %>

      subroutine read_array<%= type.fort_suf %>_<%= dim %>(arrayName, A)
        character(len = *), intent(in):: arrayName
        <%= type %>, intent(out), allocatable:: A(<%= list(dim){':'} %>)

        integer:: rU1
        character(len = LEN_NAME_MAX):: arrayFileName

        arrayFileName = trim(arrayName) // ARRAY_EXT

        call read_array_meta(arrayFileName, A)

#ifdef NEWUNIT_AVAILABLE
        open(newunit = rU1, file = trim(arrayFileName), status = 'old', action = 'read', form = 'unformatted')
#else
        open(unit = rU1, file = trim(arrayFileName), status = 'old', action = 'read', form = 'unformatted')
        call new_unit(rU1)
#endif
        read(rU1) A
        close(rU1)
      end subroutine read_array<%= type.fort_suf %>_<%= dim %>

      subroutine read_array_meta<%= type.fort_suf %>_<%= dim %>(arrayFileName, A)
        character(len = *), intent(in):: arrayFileName
        <%= type %>, intent(out), allocatable:: A(<%= list(dim){':'} %>)

        character(len = *), parameter:: dataType = '<%= type %>'
        integer, parameter:: dim = <%= dim %>

        <% # Use .max to get nice error message.  %>
        character(len = <%= TYPES.map(&:size).max %>):: dataTypeIn
        integer:: versionIn
        integer:: dimIn
        integer:: sizes(1:dim)
        integer:: i
        integer:: rU1
        character(len = LEN_NAME_MAX):: arrayMetaFileName

        arrayMetaFileName = trim(arrayFileName) // META_EXT

#ifdef NEWUNIT_AVAILABLE
        open(newunit = rU1, file = trim(arrayMetaFileName), status = 'old', action = 'read')
#else
        open(unit = rU1, file = trim(arrayMetaFileName), status = 'old', action = 'read')
        call new_unit(rU1)
#endif

        read(rU1, *) versionIn
        if(versionIn /= VERSION)then
          write(0, *) 'Versions of ', trim(arrayMetaFileName), ' and current library differ: ', versionIn, ' and ', VERSION
          stop 1
        end if

        read(rU1, *) dataTypeIn
        if(dataTypeIn /= dataType)then
          write(0, *) 'Data type mismatch in ', trim(arrayMetaFileName), '. Expected ', dataType, ' but got ', trim(dataTypeIn)
          stop 1
        end if

        read(rU1, *) dimIn
        if(dimIn /= dim)then
          write(0, *) 'Dimension mismatch in ', trim(arrayMetaFileName), '. Expected ', dim, ' but got ', dimIn
          stop 1
        end if

        read(rU1, *) (sizes(i), i = 1, dim)

        close(rU1)

        allocate(A(<%= list(dim){|i| "1:sizes(#{i})"} %>))
      end subroutine read_array_meta<%= type.fort_suf %>_<%= dim %>
    <% } %>
  <% } %>


  <% ['integer', 'integer(8)'].each{|type| %>
    subroutine new_unit<%= type.fort_suf %>(n)
      <%= type %>, intent(out):: n
      <%= type %>:: i, unitMin, unitMax
      logical:: isOpened

      unitMin = max(ERROR_UNIT, INPUT_UNIT, OUTPUT_UNIT)
      unitMax = huge(0)
      do i = unitMin, unitMax
        inquire(unit = i, opened = isOpened)
        if(.not.(isOpened))then
          n = i
          return
        end if
      end do

      write(0, *) "Unit numbers between ", unitMin, unitMax, " are not available."
      stop 1
    end subroutine new_unit<%= type.fort_suf %>
  <% } %>
end module lib_io
