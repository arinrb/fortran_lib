<%
  require 'fort'

  TYPES\
  = ::Fort::Type::Logical.multi_provide\
  + ::Fort::Type::Character.multi_provide\
  + ::Fort::Type::Integer.multi_provide\
  + ::Fort::Type::Real.multi_provide\
  + ::Fort::Type::Complex.multi_provide
%>

module lib_reflectable
  <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>

  implicit none

  private

  public:: str_from_type
  public:: dim_from_type
  public:: stem_from_type

  <%- TYPES.each{|t| -%>
    interface str_from_type
      module procedure str_from_type<%= t %>
    end interface str_from_type

    interface dim_from_type
      module procedure dim_from_type<%= t %>
    end interface dim_from_type

    interface stem_from_type
      module procedure stem_from_type<%= t %>
    end interface stem_from_type
  <%- } -%>

contains

  <%- TYPES.each{|t| -%>
    pure function str_from_type<%= t %>(v) result(this)
      character(len = *), parameter:: STRING_EXPRESSION = "<%= t %>"
      character(len = len(STRING_EXPRESSION)):: this
      <%= t.declare %>, intent(in):: v

      this = STRING_EXPRESSION
    end function str_from_type<%= t %>

    pure function dim_from_type<%= t %>(v) result(this)
      integer:: this
      <%= t.declare %>, intent(in):: v

      this = <%= t.dim %>
    end function dim_from_type<%= t %>

    pure function stem_from_type<%= t %>(v) result(this)
      character(len = *), parameter:: STEM = "<%= t.type %>"
      character(len = len(STEM)):: this
      <%= t.declare %>, intent(in):: v

      this = STEM
    end function stem_from_type<%= t %>
  <%- } -%>
end module lib_reflectable
