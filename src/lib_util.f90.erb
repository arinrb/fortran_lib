<%
  TYPES = [
    'integer',
    'integer(8)',
    'real',
    'double precision',
    'complex',
    'complex(kind(0.0d0))',
    'logical',
    'character(len = *)'
  ]

  DIM_MAX = 7
  DIM_RANGE = (0..DIM_MAX)

  def list(n, str = ', ', &block)
    (1..n).map(&block).join(str)
  end

  def parenthesis(n)
    if n >= 1
      "(#{list(n){':'}})"
    else
      ""
    end
  end

  class String
    def fort_suf
      buf = self.gsub(/[^\w]/, '_')
      buf = 'type_' + buf unless buf[0] =~ /[A-Za-z]/
      '_' + buf
    end
  end
%>

module lib_util
  use, intrinsic:: iso_fortran_env, only: ERROR_UNIT
  implicit none
  private
  public:: raise, check


  interface raise
    module procedure raise_without_value
  end interface raise

  interface check
    module procedure check_without_value
  end interface check

  <% TYPES.each{|type| %>
    <% DIM_RANGE.each{|dim| %>
      interface raise
        module procedure raise<%= type.fort_suf %>_<%= dim %>
      end interface

      interface check
        module procedure check<%= type.fort_suf %>_<%= dim %>
      end interface
    <%}%>
  <%}%>

contains

  ! Define check_without_value separately because
  ! SOME_TYPE, intent(in), optional:: value
  ! makes "with_value" subroutines ambiguous.
  subroutine raise_without_value(errorMessage)
    character(len = *), intent(in):: errorMessage

    write(ERROR_UNIT, *) errorMessage
    stop 1
  end subroutine raise_without_value

  subroutine check_without_value(isOk, errorMessage)
    logical, intent(in):: isOk
    character(len = *), intent(in):: errorMessage

    if(.not.isOk) call raise(errorMessage)
  end subroutine check_without_value

  <% TYPES.each{|type| %>
    <% DIM_RANGE.each{|dim| %>
      subroutine raise<%= type.fort_suf %>_<%= dim %>(errorMessage, value)
        character(len = *), intent(in):: errorMessage
        <%= type %>, intent(in):: value<%= parenthesis(dim)%>

        write(ERROR_UNIT, *) errorMessage, value
        stop 1
      end subroutine raise<%= type.fort_suf %>_<%= dim %>

      subroutine check<%= type.fort_suf %>_<%= dim %>(isOk, errorMessage, value)
        logical, intent(in):: isOk
        character(len = *), intent(in):: errorMessage
        <%= type %>, intent(in):: value<%= parenthesis(dim)%>

        if(.not.isOk) call raise(errorMessage, value)
      end subroutine check<%= type.fort_suf %>_<%= dim %>
    <%}%>
  <%}%>
end module lib_util
