<%
  require 'fort'

  TYPES\
  = (0..7).to_a.map{|dim| ::Fort::Type::LogicalType.new(dim)}\
  + (0..7).to_a.product([8, 16, 32, 64]).map{|dim, kind| ::Fort::Type::IntegerType.new(dim, kind)}\
  + (0..7).to_a.product([32, 64, 128]).map{|dim, kind| ::Fort::Type::RealType.new(dim, kind)}\
  + (0..7).to_a.product([32, 64, 128]).map{|dim, kind| ::Fort::Type::ComplexType.new(dim, kind)}\
  + (0..7).to_a.map{|dim| ::Fort::Type::CharacterType.new(dim, '*')}
%>

module lib_util
  <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
  use, intrinsic:: iso_fortran_env, only: ERROR_UNIT
  implicit none
  private
  public:: raise, check


  interface raise
    module procedure raise_without_value
  end interface raise

  interface check
    module procedure check_without_value
  end interface check

  <%- TYPES.each{|t| -%>
    interface raise
      module procedure raise<%= t %>
    end interface raise

    interface check
      module procedure check<%= t %>
    end interface check
  <%- } -%>

contains

  ! Define check_without_value separately because
  ! SOME_TYPE, intent(in), optional:: value
  ! makes "with_value" subroutines ambiguous.
  subroutine raise_without_value(errorMessage)
    character(len = *), intent(in), optional:: errorMessage

    if(present(errorMessage)) write(ERROR_UNIT, *) errorMessage
    stop 1
  end subroutine raise_without_value

  subroutine check_without_value(isOk, errorMessage)
    logical, intent(in):: isOk
    character(len = *), intent(in), optional:: errorMessage

    if(.not.isOk)then
      if(present(errorMessage))then
        call raise(errorMessage)
      else
        call raise()
      end if
    end if
  end subroutine check_without_value

  <%- TYPES.each{|t| -%>
    subroutine raise<%= t %>(errorMessage, value)
      character(len = *), intent(in):: errorMessage
      <%= t.declare %>, intent(in):: value

      write(ERROR_UNIT, *) errorMessage, value
      stop 1
    end subroutine raise<%= t %>

    subroutine check<%= t %>(isOk, errorMessage, value)
      logical, intent(in):: isOk
      character(len = *), intent(in):: errorMessage
      <%= t.declare %>, intent(in):: value

      if(.not.isOk) call raise(errorMessage, value)
    end subroutine check<%= t %>
  <%- } -%>
end module lib_util
