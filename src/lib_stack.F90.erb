<%-
require 'fort'
TYPES\
= ::Fort::Type::Real.multi_provide\
+ ::Fort::Type::Integer.multi_provide\
+ ::Fort::Type::Logical.multi_provide\
+ ::Fort::Type::Complex.multi_provide\
+ ::Fort::Type::Character.multi_provide(len: (0..13).map{|n| 2**n})
-%>

module lib_stack
  <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>
  implicit none

  private
  public:: push, pop

  <%- TYPES.each{|t| -%>
    public:: <%= t %>Stack
  <%- } -%>

  <%- TYPES.each{|t| -%>
    interface push
      module procedure push<%= t %>
    end interface push

    interface pop
      module procedure pop<%= t %>
    end interface pop

    interface is_empty
      module procedure is_empty<%= t %>
    end interface is_empty
  <%- } -%>

  <%- TYPES.each{|t| -%>
    type <%= t %>Stack
      type(<%= t %>StackNode), pointer:: entry => null()
    end type <%= t %>Stack

    type <%= t %>StackNode
      <%= t.declare %><%= (t.dim > 0) ? ', allocatable' : '' %>:: val
      type(<%= t %>StackNode), pointer:: prev => null()
    end type <%= t %>StackNode
  <%- } -%>

contains

  <%- TYPES.each{|t| -%>
    subroutine push<%= t %>(stack, val)
      type(<%= t %>Stack), intent(inout):: stack
      <%= t.declare %>, intent(in):: val
      type(<%= t %>StackNode), pointer:: newNode

      allocate(newNode)
      newNode%val = val
      newNode%prev => stack%entry
      stack%entry => newNode
    end subroutine push<%= t %>

    function pop<%= t %>(stack, val) result(isSuccess)
      type(<%= t %>Stack), intent(inout):: stack
      <%= t.declare %><%= (t.dim > 0) ? ', allocatable' : '' %>, intent(inout):: val
      Logical:: isSuccess
      type(<%= t %>StackNode), pointer:: tmpNodeHolder => null()

      if(is_empty(stack))then
        isSuccess = .false.
        return
      end if

      val = stack%entry%val
      tmpNodeHolder => stack%entry
      stack%entry => stack%entry%prev
      deallocate(tmpNodeHolder)
      isSuccess = .true.
    end function pop<%= t %>

    function is_empty<%= t %>(stack) result(answer)
      type(<%= t %>Stack), intent(in):: stack
      Logical:: answer

      answer = .not.associated(stack%entry)
    end function is_empty<%= t %>
  <%- } -%>
end module lib_stack
