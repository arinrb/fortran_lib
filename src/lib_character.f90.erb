<%
  TYPES = [
    'integer',
    'integer(8)',
    'real',
    'double precision',
    'complex',
    'complex(kind(0.0d0))',
    'logical',
  ]

  class String
    def fort_suf
      work = self.gsub(/[^\w]/, '_')
      work = 'type_' + work unless work[0] =~ /[A-Za-z]/
      '_' + work
    end
  end
%>
module lib_character
  implicit none
  private
  public:: s, str, STR_LEN, TAB, NEW_LINE
  integer,   parameter:: STR_LEN  = 256
  character, parameter:: TAB      = char(9)
  character, parameter:: NEW_LINE = new_line('_')

  interface str
    <% TYPES.each{|type| %>
      module procedure str<%= type.fort_suf %>
    <% } %>
  end interface

contains

  function s(str) result(this)
    character(len = *), intent(in):: str
    character(len = len_trim(adjustl(str))):: this
    this = trim(adjustl(str))
  end function s

  <% TYPES.each{|type| %>
    function str<%= type.fort_suf %>(x) result(this)
       character(len = STR_LEN):: this
       <%= type %>, intent(in):: x
       write(this, *) x
       this = s(this)
    end function str<%= type.fort_suf %>
  <% } %>
end module lib_character
