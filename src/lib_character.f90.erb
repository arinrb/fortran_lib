<%
  require 'fort'

  TYPES\
  = [::Fort::Type::LogicalType.new(0)]\
  + [8, 16, 32, 64].map{|kind| ::Fort::Type::IntegerType.new(0, kind)}\
  + [32, 64, 128].map{|kind| ::Fort::Type::RealType.new(0, kind)}\
  + [32, 64, 128].map{|kind| ::Fort::Type::ComplexType.new(0, kind)}\
  + [::Fort::Type::CharacterType.new(0, '*')]
%>
module lib_character
  <%= ::Fort::Type::USE_ISO_FORTRAN_ENV %>

  implicit none

  private

  public:: s                    ! Same as String#strip method in Ruby.
  public:: str                  ! Convert a value to a string. The result is also stripped.
  public:: STR_LEN              ! Maximum length of str.
  public:: TAB, NEW_LINE

  integer,   parameter:: STR_LEN  = 1024
  character, parameter:: TAB      = char(9)
  character, parameter:: NEW_LINE = char(10)

  <%- TYPES.each{|t| -%>
    interface str
      module procedure str<%= t %>
    end interface str

    interface str_fixed
      module procedure str_fixed<%= t %>
    end interface str_fixed
  <%- } -%>

contains

  pure function s(str) result(this)
    character(len = *), intent(in):: str
    character(len = len_trim(adjustl(str))):: this

    this = trim(adjustl(str))
  end function s

  <%- TYPES.each{|t| -%>
    pure function str<%= t %>(x) result(this)
      <%= t.declare %>, intent(in):: x
      character(len = len(s(str_fixed(x)))):: this

      this = s(str_fixed(x))
    end function str<%= t %>

    pure function str_fixed<%= t %>(x) result(this)
      character(len = STR_LEN):: this
      <%= t.declare %>, intent(in):: x

      write(this, *) x
      this = s(this)
    end function str_fixed<%= t %>
  <%- } -%>
end module lib_character
